#
mainmenu "BitThunder Configuration"

config CONFIGURED
    bool
	default y

config PROJECT_CONFIG
	bool
	option env="PROJECT_CONFIG"
	default n

config PROJECT_DIR
	string
	default "scripts" if !PROJECT_CONFIG
	option env="PROJECT_DIR"

choice
	prompt "Build OS or Library"
	default OS

config OS
	bool "OS"

config LIB
    bool "Library"

endchoice


menu "Build System (dbuild)"

config DBUILD_PYTHON
    string "Python path"
	default "python"
	---help---
	DBUILD uses Python to form pretty output. Ensure it has a valid python
	interpreter path here.

choice
	prompt "Build Host Platform"
	default HOST_LINUX

config HOST_LINUX
	bool "Linux"

config HOST_WINDOWS
	bool "Windows"

config HOST_OTHER
	bool "Other"

endchoice

config TOOLCHAIN
	string "Toolchain prefix"
	default "arm-none-eabi-"


choice
	prompt "Optimisation Level"
	default OPTIMISE_NONE

config OPTIMISE_NONE
	bool "No Optimisations"

config OPTIMISE_SIZE
    bool "-Os (Optimise for size)"

config OPTIMISE_SPEED
	bool "-O2 (Optimise for speed)"

config OPTIMISE_ULTRA_SPEED
	bool "-O3 (Optimise for ultra-speed (can increase code-size))"

endchoice


choice
	prompt "Warning Level"
	default WARN_NORMAL

config WARN_NORMAL
	bool "Normal warnings from compiler"

config WARN_ALL
	bool "-Wall on compiler"

config WARN_PEDANTIC
	bool "-Wall --pedantic"

config WARN_ERROR
	bool "-Wall -Werror"

config WARN_ERROR_PEDANTIC
	bool "-Wall -Werror --pedantic (For the insane)"

endchoice

config TOOLCHAIN_WARNING
	string
	default ""							if WARN_NORMAL
	default	"-Wall"						if WARN_ALL
	default "-Wall --pedantic"			if WARN_PEDANTIC
	default "-Wall -Werror"				if WARN_ERROR
	default "-Wall -Werror --pedantic" 	if WARN_ERROR_PEDANTIC

config TOOLCHAIN_OPTIMISATION
    string
	default "-Os" if OPTIMISE_SIZE
	default "-O0" if OPTIMISE_NONE
	default "-O2" if OPTIMISE_SPEED
	default "-O3" if OPTIMISE_ULTRA_SPEED

config TOOLCHAIN_DEBUG
    bool "Debug Symbols"
	default y

config TOOLCHAIN_DEBUG_FLAGS
	string
	default "-g" if TOOLCHAIN_DEBUG


choice
	prompt "Windows Build Environment"
	default WINDOWS_CYGWIN
	depends on HOST_WINDOWS

config WINDOWS_NATIVE
	bool "Windows Native"
	---help---
		Build natively in a CMD.exe environment with Windows style paths (like C:\cgywin\home)

config WINDOWS_CYGWIN
	bool "Cygwin"
	---help---
		Build natively in a Cygwin environment with POSIX style paths (like /cygdrive/c/cgywin/home)

config WINDOWS_MSYS
	bool "MSYS"
	---help---
		Build natively in a Cygwin environment with POSIX style paths (like /cygdrive/c/cgywin/home)

config WINDOWS_OTHER
	bool "Windows POSIX-like environment"
	---help---
		Build natively in another POSIX-like environment.  Additional support may be necessary

endchoice

menu "Build Configuration"

config BUILD_NOSTDLIB
	   bool "Disable stdlib linking"
	   default y
	   ---help---
	   Should be enabled for a pure standalone kernel.

config BUILD_GC_UNUSED
	   bool "Removed unused code/data"
	   default y
	   ---help---
	   Asks the linker to always remove unused data/code from the kernel.

config BUILD_DISASSEMBLE
	   bool "Create Assembly listing"
	   default y

config BUILD_DISASSEMBLE_SOURCE
	   bool "Source code in listing"
	   depends on BUILD_DISASSEMBLE
	   default n

endmenu

endmenu

menu "System Architecture"
source "arch/Kconfig"
endmenu

menu "OS Features"
depends on OS
source "os/Kconfig"
endmenu

menu "Drivers"
source "drivers/Kconfig"
endmenu

menu "Kernel Options"
source kernel/Kconfig
endmenu

if PROJECT_CONFIG
menu "Project Configuration"
source "$PROJECT_DIR/Kconfig"
endmenu
endif
